/*************************************************************
 * Copyright: Walker Team, UBTech
 * Auther: jingfan.zhang
 * Build Date: 01/05/2023
 * Modify Date:
 *************************************************************/

#include "fir_filter.h"

FIRFilter::FIRFilter() {
  data_count = 0;
  length_fir = 31;
  hfir = Eigen::VectorXd::Zero(length_fir);
  hfir << 0.00491362523609609, 0.00553109457845545, 0.00735642467264423,
      0.0103098774295407, 0.0142624023829810, 0.0190412765922707,
      0.0244376536908940, 0.0302156921172685, 0.0361228635222839,
      0.0419009907495189, 0.0472975328835951, 0.0520766240550339,
      0.0560293834489898, 0.0589830458202215, 0.0608085133751646,
      0.0614259988900832, 0.0608085133751646, 0.0589830458202215,
      0.0560293834489898, 0.0520766240550339, 0.0472975328835951,
      0.0419009907495189, 0.0361228635222839, 0.0302156921172685,
      0.0244376536908940, 0.0190412765922707, 0.0142624023829810,
      0.0103098774295407, 0.00735642467264423, 0.00553109457845545,
      0.00491362523609609;
  data_last_n = Eigen::VectorXd::Zero(length_fir);
  data_last_temp = Eigen::VectorXd::Zero(length_fir - 1);

  data_count_ho = 0;
  length_fir_ho = 61;
  hfir_ho = Eigen::VectorXd::Zero(length_fir_ho);
  hfir_ho << 0.00246229104892757, 0.00253991263833975, 0.00277181334903282,
      0.00315546330149835, 0.00368666909292306, 0.00435961969088118,
      0.00516695006448548, 0.00609982185602360, 0.00714802020919197,
      0.00830006569281255, 0.00954334009332202, 0.0108642246971774,
      0.0122482495472943, 0.0136802520372281, 0.0151445431043495,
      0.0166250791998703, 0.0181056381501683, 0.0195699969811316,
      0.0210021097556627, 0.0223862834742911, 0.0237073501100397,
      0.0249508328910458, 0.0261031050074828, 0.0271515390023805,
      0.0280846452080821, 0.0288921977101860, 0.0295653464575880,
      0.0300967142891582, 0.0304804778129898, 0.0307124312512402,
      0.0307900325503905, 0.0307124312512402, 0.0304804778129898,
      0.0300967142891582, 0.0295653464575880, 0.0288921977101860,
      0.0280846452080821, 0.0271515390023805, 0.0261031050074828,
      0.0249508328910458, 0.0237073501100397, 0.0223862834742911,
      0.0210021097556627, 0.0195699969811316, 0.0181056381501683,
      0.0166250791998703, 0.0151445431043495, 0.0136802520372281,
      0.0122482495472943, 0.0108642246971774, 0.00954334009332202,
      0.00830006569281255, 0.00714802020919197, 0.00609982185602360,
      0.00516695006448548, 0.00435961969088118, 0.00368666909292306,
      0.00315546330149835, 0.00277181334903282, 0.00253991263833975,
      0.00246229104892757;
  data_last_n_ho = Eigen::VectorXd::Zero(length_fir_ho);
  data_last_temp_ho = Eigen::VectorXd::Zero(length_fir_ho - 1);

  // length_fir_ho = 101;
  // hfir_ho = Eigen::VectorXd::Zero(length_fir_ho);
  // hfir_ho << 0.00147801565221420, 0.00149484655993699, 0.00154515415914391,
  // 0.00162874401999970, 0.00174529017297680,
  //     0.00189433638696861, 0.00207529796256795, 0.00228746403345623,
  //     0.00253000036683751, 0.00280195265187619, 0.00310225026316489,
  //     0.00342971048436839, 0.00378304317536743, 0.00416085586446995,
  //     0.00456165924557386, 0.00498387305856193, 0.00542583232969114,
  //     0.00588579394731293, 0.00636194354693245, 0.00685240267838895,
  //     0.00735523622682197, 0.00786846005808147, 0.00839004885835114,
  //     0.00891794413698321, 0.00945006236089637, 0.00998430318836572,
  //     0.0105185577696393, 0.0110507170815498, 0.0115786802631533,
  //     0.0121003629194233, 0.0126137053601514, 0.0131166807414624,
  //     0.0136073030777358, 0.0140836350922356, 0.0145437958753920,
  //     0.0149859683204320, 0.0154084063069430, 0.0158094416039459,
  //     0.0161874904651642, 0.0165410598903944, 0.0168687535282019,
  //     0.0171692771965868, 0.0174414439997747, 0.0176841790208852,
  //     0.0178965235719098, 0.0180776389841812, 0.0182268099243354,
  //     0.0183434472226439, 0.0184270902025259, 0.0184774085020195,
  //     0.0184942033800062, 0.0184774085020195, 0.0184270902025259,
  //     0.0183434472226439, 0.0182268099243354, 0.0180776389841812,
  //     0.0178965235719098, 0.0176841790208852, 0.0174414439997747,
  //     0.0171692771965868, 0.0168687535282019, 0.0165410598903944,
  //     0.0161874904651642, 0.0158094416039459, 0.0154084063069430,
  //     0.0149859683204320, 0.0145437958753920, 0.0140836350922356,
  //     0.0136073030777358, 0.0131166807414624, 0.0126137053601514,
  //     0.0121003629194233, 0.0115786802631533, 0.0110507170815498,
  //     0.0105185577696393, 0.00998430318836572, 0.00945006236089637,
  //     0.00891794413698321, 0.00839004885835114, 0.00786846005808147,
  //     0.00735523622682197, 0.00685240267838895, 0.00636194354693245,
  //     0.00588579394731293, 0.00542583232969114, 0.00498387305856193,
  //     0.00456165924557386, 0.00416085586446995, 0.00378304317536743,
  //     0.00342971048436839, 0.00310225026316489, 0.00280195265187619,
  //     0.00253000036683751, 0.00228746403345623, 0.00207529796256795,
  //     0.00189433638696861, 0.00174529017297680, 0.00162874401999970,
  //     0.00154515415914391, 0.00149484655993699, 0.00147801565221420;
  // data_last_n_ho = Eigen::VectorXd::Zero(length_fir_ho);
  // data_last_temp_ho = Eigen::VectorXd::Zero(length_fir_ho - 1);
}

FIRFilter::~FIRFilter() {}

double FIRFilter::VelLowpassFirFilter(const double data_now) {
  data_count += 1;

  data_last_n << data_last_temp, data_now;
  double data_filted = 0;

  if (data_count < length_fir) {
    data_filted = data_now;
  } else {
    data_count = length_fir;
    for (int i = 0; i < length_fir; i++) {
      data_filted += data_last_n(i) * hfir(length_fir - 1 - i);
    }
  }

  data_last_temp = data_last_n.tail(length_fir - 1);

  return data_filted;
}

double FIRFilter::VelLowpassFirFilterHighOrder(const double data_now) {
  data_count_ho += 1;
  data_last_n_ho << data_last_temp_ho, data_now;
  double data_filted = 0;

  if (data_count_ho < length_fir_ho) {
    data_filted = data_now;
  } else {
    data_count_ho = length_fir_ho;

    for (int i = 0; i < length_fir_ho; i++) {
      data_filted += data_last_n_ho(i) * hfir_ho(length_fir_ho - 1 - i);
    }
  }

  data_last_temp_ho = data_last_n_ho.tail(length_fir_ho - 1);

  return data_filted;
}
